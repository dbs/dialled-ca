#!/usr/bin/env python

import argparse
import datetime
import json
import os
import rdflib

today = datetime.date.today().isoformat()
source = os.path.join("datadumps", "dialled_%s" % (today), "dialled.ttl")
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--libraries", help="JSON list of libraries", default="libraries_all.json")
parser.add_argument("--source", help="Source file containing library LOD", default=source)
args = parser.parse_args()

# count the number of libraries we know about
with open(args.libraries, 'r') as f:
    j = json.loads(f.read())
    print("COUNT: Total number of libraries crawled: %d" % (len(j)))

g = rdflib.ConjunctiveGraph()
g.parse(args.source, format='turtle')
prefixes = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX md: <http://www.w3.org/ns/md#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX schema: <http://schema.org/>
PREFIX twitter: <twitter:>
"""

libraries = g.query("""
%s
SELECT DISTINCT ?lib
WHERE {
    ?lib a schema:Library .
    OPTIONAL {?lib schema:name ?name}
    OPTIONAL {?lib schema:url ?url}
    FILTER (isIRI(?lib))
}
ORDER BY ?lib
LIMIT 100
""" % (prefixes))

print("COUNT: schema.org/Library = %d" % (len(libraries)))
for row in libraries:
    print("schema.org/Library %s" % row)

events = g.query("""
%s
SELECT DISTINCT ?lib
WHERE {
    ?lib a schema:Event .
    FILTER (isIRI(?lib))
}
""" % (prefixes))

print("COUNT: schema.org/Event = %d" % (len(events)))
for row in events:
    print("schema.org/Event %s" % row)

orgs = g.query("""
%s
SELECT DISTINCT ?lib
WHERE {
    ?lib a schema:Organization  .
    FILTER (isIRI(?lib))
}
ORDER BY ?lib
""" % (prefixes))

print("COUNT: schema.org/Organization = %d" % (len(orgs)))
for row in orgs:
    print("schema.org/Organization %s" % row)

orgs = g.query("""
%s
SELECT DISTINCT ?lib
WHERE {
    ?lib a schema:LocalBusiness .
    FILTER (isIRI(?lib))
}
ORDER BY ?lib
""" % (prefixes))

print("COUNT: schema.org/LocalBusiness= %d" % (len(orgs)))
for row in orgs:
    print("schema.org/LocalBusiness %s" % row)

address = g.query("""
%s
SELECT DISTINCT ?lib ?add
WHERE {
    {
        ?lib schema:address/schema:streetAddress+ ?add .
    }
    FILTER (isIRI(?lib))
}
ORDER BY ?lib
""" % (prefixes))

print("COUNT: schema.org/address= %d" % (len(address)))
for row in address:
    print("schema.org/Address1 %s %s" % row)

addresses = g.query("""
%s
SELECT DISTINCT ?lib
WHERE {
    {
        ?lib schema:address ?add .
        ?add a schema:PostalAddress .
        OPTIONAL {?add schema:streetAddress ?street}
    }
    UNION
    {
        ?lib schema:branchOf ?lib2 .
        ?lib2 schema:address ?add .
        ?add a schema:PostalAddress .
        OPTIONAL {?add schema:streetAddress ?street}
    }
    UNION
    {
        ?lib schema:location ?loc .
        ?loc schema:address ?add .
        ?add a schema:PostalAddress .
        OPTIONAL {?add schema:streetAddress ?street}
    }
    UNION
    {
        ?lib a schema:PostalAddress .
        OPTIONAL {?add schema:streetAddress ?street}
    }

    FILTER (isIRI(?lib))
}
ORDER BY ?lib
""" % (prefixes))

print("COUNT: schema.org/PostalAddress= %d" % (len(address)))
for row in addresses:
    print("schema.org/PostalAddress %s" % row)

libs = g.query("""
# Common Bibliographic Vocabularies
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX bibo: <http://purl.org/ontology/bibo/>
PREFIX dct: <http://purl.org/dc/terms/>
# W3C
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>

PREFIX schema: <http://schema.org/>

SELECT ?lib ?name {
  ?lib rdf:type schema:Library .
  ?lib schema:name ?name
}
""")

print("COUNT: schema.org/Library name = %d" % (len(libs)))
for lib in libs:
    print("%s %s" % lib)

libs = g.query("""
# Common Bibliographic Vocabularies
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX bibo: <http://purl.org/ontology/bibo/>
PREFIX dct: <http://purl.org/dc/terms/>
# W3C
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sioc: <http://rdfs.org/sioc/ns#>
PREFIX twitter: <twitter:>

PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?item ?creator 
WHERE {
  {
    ?item dct:creator ?creator
  }
       
  UNION {
    ?item sioc:has_creator ?creator
  }
  UNION {
    ?item twitter:creator ?creator
  }
}
""")
print("COUNT: creator = %d" % (len(libs)))
for lib in libs:
    print("%s %s" % lib)

# Query for "required" properties of common vocabularies
for ont in ('schema:name', 'ogp:title', 'twitter:card'):
    res = g.query("""
    %s
    SELECT DISTINCT ?lib
    WHERE {
        ?lib %s ?name .
        FILTER (isIRI(?lib))
    }
    ORDER BY ?lib
    """ % (prefixes, ont))

    print("COUNT: %s = %d" % (ont, len(res)))
    for row in res:
        print("%s %s" % (ont, row))
